name: Release Train

on:
  pull_request:
    types: [closed]
    branches: [main]

env:
  WEB_APP_PATH: apps/web
  API_APP_PATH: apps/api
  PACKAGES_PATH: packages
  PNPM_SUPPRESS_UPDATE_NOTIFIER: true

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    permissions:
      contents: write
    outputs:
      new-web-version: ${{ steps.bump_versions.outputs.NEW_WEB_VERSION }}
      new-api-version: ${{ steps.bump_versions.outputs.NEW_API_VERSION }}
      version-type: ${{ steps.analyze-commits.outputs.version_type }}
      web-changed: ${{ steps.bump_versions.outputs.WEB_CHANGED }}
      api-changed: ${{ steps.bump_versions.outputs.API_CHANGED }}

    steps:
      - name: Generate GitHub App token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Analyze commit messages and determine version bump
        id: analyze-commits
        run: |
          COMMITS=$(git log --oneline ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          echo "Analyzing commits:"
          echo "$COMMITS"
          VERSION_TYPE="patch"
          if echo "$COMMITS" | grep -E ":boom:" > /dev/null; then
            VERSION_TYPE="major"
          elif echo "$COMMITS" | grep -E ":sparkles:" > /dev/null; then
            VERSION_TYPE="minor"
          fi
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT

      - name: Get changed files
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          echo "$CHANGED_FILES" > changed_files.txt

      - name: Check for changes and bump versions
        id: bump_versions
        run: |
          VERSION_TYPE="${{ steps.analyze-commits.outputs.version_type }}"
          CHANGED_FILES=$(cat changed_files.txt)

          bump_version() {
            local app_path=$1
            local version_type=$3
            if [ -f "$app_path/package.json" ]; then
              cd "$app_path"
              pnpm version "$version_type" --no-git-tag-version >/dev/null
              local new_version=$(node -p "require('./package.json').version")
              cd - > /dev/null
              echo "$new_version"
            fi
          }

          has_changes() {
            local path=$1
            echo "$CHANGED_FILES" | grep -E "^$path/" > /dev/null
          }

          WEB_CHANGED=false
          API_CHANGED=false
          PACKAGES_CHANGED=false
          NEW_WEB_VERSION=""
          NEW_API_VERSION=""

          if has_changes "$PACKAGES_PATH"; then
            PACKAGES_CHANGED=true
            for package_dir in $(echo "$CHANGED_FILES" | grep -E "^$PACKAGES_PATH/" | cut -d'/' -f1-2 | sort -u); do
              if [ -d "$package_dir" ] && [ -f "$package_dir/package.json" ]; then
                bump_version "$package_dir" "package $(basename "$package_dir")" "$VERSION_TYPE" > /dev/null
              fi
            done
          fi

          if has_changes "$WEB_APP_PATH"; then
            NEW_WEB_VERSION=$(bump_version "$WEB_APP_PATH" "web" "$VERSION_TYPE")
            WEB_CHANGED=true
          fi

          if has_changes "$API_APP_PATH"; then
            NEW_API_VERSION=$(bump_version "$API_APP_PATH" "api" "$VERSION_TYPE")
            API_CHANGED=true
          fi

          if [ "$PACKAGES_CHANGED" = "true" ]; then
            if [ "$WEB_CHANGED" != "true" ] && [ -f "$WEB_APP_PATH/package.json" ]; then
              NEW_WEB_VERSION=$(bump_version "$WEB_APP_PATH" "web" "$VERSION_TYPE")
              WEB_CHANGED=true
            fi
            if [ "$API_CHANGED" != "true" ] && [ -f "$API_APP_PATH/package.json" ]; then
              NEW_API_VERSION=$(bump_version "$API_APP_PATH" "api" "$VERSION_TYPE")
              API_CHANGED=true
            fi
          fi

          rm changed_files.txt

          {
            echo "WEB_CHANGED=$WEB_CHANGED";
            echo "API_CHANGED=$API_CHANGED";
            echo "NEW_WEB_VERSION=$NEW_WEB_VERSION";
            echo "NEW_API_VERSION=$NEW_API_VERSION";
          } >> "$GITHUB_OUTPUT"

      - name: Commit and Push Version Bump
        run: |
          git add .
          if ! git diff --staged --quiet; then
            CHANGES=()
            if [ "${{ steps.bump_versions.outputs.WEB_CHANGED }}" = "true" ]; then
              CHANGES+=("web@${{ steps.bump_versions.outputs.NEW_WEB_VERSION }}")
            fi
            if [ "${{ steps.bump_versions.outputs.API_CHANGED }}" = "true" ]; then
              CHANGES+=("api@${{ steps.bump_versions.outputs.NEW_API_VERSION }}")
            fi
            COMMIT_MSG="🔖 bump versions (${CHANGES[*]}) [skip ci]"
            git commit -m "$COMMIT_MSG"
            git push
          else
            echo "No version changes to commit."
          fi

  release:
    runs-on: ubuntu-latest
    needs: version-bump
    if: success() && (needs.version-bump.outputs.web-changed == 'true' || needs.version-bump.outputs.api-changed == 'true')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git for tagging
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create Tags
        id: create-tags
        run: |
          WEB_VERSION="${{ needs.version-bump.outputs.new-web-version }}"
          API_VERSION="${{ needs.version-bump.outputs.new-api-version }}"
          RELEASE_TAG=""

          if [ "${{ needs.version-bump.outputs.web-changed }}" = "true" ]; then
            TAG="web-v$WEB_VERSION"
            git tag "$TAG" -m "$TAG"
            RELEASE_TAG=$TAG
            echo "Created tag $TAG"
          fi

          if [ "${{ needs.version-bump.outputs.api-changed }}" = "true" ]; then
            TAG="api-v$API_VERSION"
            git tag "$TAG" -m "$TAG"
            if [ -z "$RELEASE_TAG" ]; then
              RELEASE_TAG=$TAG
            fi
            echo "Created tag $TAG"
          fi

          if [ -n "$RELEASE_TAG" ]; then
            git push origin --tags
            RELEASE_NAME=""
            if [ "${{ needs.version-bump.outputs.web-changed }}" = "true" ] && [ "${{ needs.version-bump.outputs.api-changed }}" = "true" ]; then
              RELEASE_NAME="Release web-v$WEB_VERSION, api-v$API_VERSION"
            elif [ "${{ needs.version-bump.outputs.web-changed }}" = "true" ]; then
              RELEASE_NAME="Release web-v$WEB_VERSION"
            elif [ "${{ needs.version-bump.outputs.api-changed }}" = "true" ]; then
              RELEASE_NAME="Release api-v$API_VERSION"
            fi
            echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          else
            echo "No new app versions to tag."
          fi

      - name: Create GitHub Release
        if: steps.create-tags.outputs.release_tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.create-tags.outputs.release_tag }}
          name: ${{ steps.create-tags.outputs.release_name }}
          body: |
            ## 🚀 Version Bump Summary
            **Version Type:** ${{ needs.version-bump.outputs.version-type }}
            - **🌐 Web App:** v${{ needs.version-bump.outputs.new-web-version }}
            - **🔌 API App:** v${{ needs.version-bump.outputs.new-api-version }}

            ---

            ###  Deployments
            - **🌐 Web App:** https://ouzx.me/
            - **🔌 API App:** https://api.ouzx.me/
          prerelease: false
